{"version":3,"sources":["serviceWorker.js","store/table/tableReducer.js","store/table/types.js","store/controls/controlsReducer.js","store/controls/types.js","store/rootReducer.js","store/store.js","helpers/index.js","components/blocks/cell/index.js","components/blocks/cell/Cell.js","store/table/tableSelectors.js","store/table/tableActions.js","containers/CellContainer.js","components/blocks/row/index.js","components/blocks/row/Row.js","containers/RowContainer.js","components/sections/controls/index.js","components/sections/controls/Controls.js","containers/ControlsContainer.js","store/controls/controlsSelectors.js","store/controls/controlsActions.js","pages/table/index.js","pages/table/Table.js","containers/TablePageContainer.js","index.js"],"names":["Boolean","window","location","hostname","match","tableReducer","store","values","loading","current","action","type","tableData","name","value","valueType","currency","controlsReducer","addressLine","combineReducers","table","controls","createStore","rootReducer","applyMiddleware","thunk","regexUrl","RegExp","Cell","memo","rowIndex","letter","isCurrent","handleChangeTableElement","setCurrentTableElement","isCurrentTableColl","doJobWithFormula","changeTableElemValueCurrency","currencyList","decoratedCurrencyValue","fixedNum","Number","toFixed","fraction","String","slice","split","reverse","reduceRight","str","elem","i","decorateCurrency","cellStyleList","className","onClick","title","onChange","array","currencyIndex","findIndex","nextCurrency","length","selectValues","state","selectLoading","selectAlphabet","alphabet","selectRows","rows","selectCurrent","selectCurrencyList","changeTableElemValue","test","connect","props","tableValue","target","dispatch","startsWith","newTableValue","alert","Row","isCurrentTableRow","map","key","Controls","setAddressLine","currentType","placeholder","selectAddressLine","currentValue","formula","Table","tableRows","Array","fill","_","index","RowContainer","fetchTable","fetch","filePath","prefix","process","concat","resolvePath","then","j","json","data","useEffect","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.45340914.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  FETCH_TABLE,\n  LOAD_TABLE,\n  CHANGE_TABLE_ELEM,\n  SET_CURRENT,\n  CHANGE_CURRENCY\n} from './types';\n\nconst tableReducer = (\n  store = { values: {}, loading: false, current: {} },\n  action\n) => {\n  switch (action.type) {\n    case FETCH_TABLE:\n      return { ...store, ...action.tableData };\n\n    case LOAD_TABLE:\n      return { ...store, loading: action.loading };\n\n    case CHANGE_TABLE_ELEM:\n      return {\n        ...store,\n        values: {\n          ...store.values,\n          [action.name]: {\n            ...store.values[action.name],\n            value: action.value,\n            valueType: action.valueType\n          }\n        }\n      };\n\n    case SET_CURRENT:\n      return {\n        ...store,\n        current: {\n          ...store.current,\n          name: action.current,\n          currency: action.currency\n        }\n      };\n\n    case CHANGE_CURRENCY:\n      return {\n        ...store,\n        values: {\n          ...store.values,\n          [action.name]: {\n            ...store.values[action.name],\n            currency: action.currency\n          }\n        }\n      };\n\n    default:\n      return store;\n  }\n};\n\nexport default tableReducer;\n","export const FETCH_TABLE = 'FETCH_TABLE';\nexport const LOAD_TABLE = 'LOAD_TABLE';\nexport const CHANGE_TABLE_ELEM = 'CHANGE_TABLE_ELEM';\nexport const SET_CURRENT = 'SET_CURRENT';\nexport const DO_JOB_WITH_FORMULA = 'DO_JOB_WITH_FORMULA';\nexport const CHANGE_CURRENCY = 'CHANGE_CURRENCY';\n","import { SET_ADDRESS_LINE } from './types';\n\nconst controlsReducer = (store = { addressLine: '' }, action) => {\n  switch (action.type) {\n    case SET_ADDRESS_LINE:\n      return { ...store, addressLine: action.addressLine };\n\n    default:\n      return store;\n  }\n};\n\nexport default controlsReducer;\n","export const SET_ADDRESS_LINE = 'SET_ADDRESS_LINE';\nexport const SET_CURRENT_FORMULA = 'SET_CURRENT_FORMULA';\n","import { combineReducers } from 'redux';\nimport tableReducer from './table/tableReducer';\nimport controlsReducer from './controls/controlsReducer';\n\nexport default combineReducers({\n  table: tableReducer,\n  controls: controlsReducer\n});\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport rootReducer from './rootReducer';\n\nexport default createStore(rootReducer, {}, applyMiddleware(thunk));\n","export const resolvePath = (\n  filePath,\n  prefix = process.env.PUBLIC_URL.concat('/')\n) => (filePath.startsWith('http') ? filePath : prefix.concat(filePath));\n\nconst expressionUrl = /(https?:\\/\\/(?:www\\.|(?!www))[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|www\\.[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|https?:\\/\\/(?:www\\.|(?!www))[a-zA-Z0-9]+\\.[^\\s]{2,}|www\\.[a-zA-Z0-9]+\\.[^\\s]{2,})/gi;\nexport const regexUrl = new RegExp(expressionUrl);\n\nexport const decorateCurrency = (value, currency) => {\n  const fixedNum = Number(value).toFixed(2);\n  const fraction = String(fixedNum).slice(-3);\n  const integer = String(fixedNum).slice(0, -3);\n\n  const formattedNum = integer\n    .split('')\n    .reverse()\n    .reduceRight((str, elem, i) => {\n      return str + ((i + 1) % 3 === 0 && i ? ' ' + elem : elem);\n    }, '');\n\n  return formattedNum + fraction + ' ' + currency;\n};\n","import Cell from './Cell';\n\nexport default Cell;\n","import React, { memo } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { decorateCurrency } from '../../../helpers';\n\nconst Cell = memo(\n  ({\n    rowIndex,\n    letter,\n    value,\n    isCurrent,\n    currency,\n    handleChangeTableElement,\n    setCurrentTableElement,\n    isCurrentTableColl,\n    name,\n    valueType,\n    doJobWithFormula,\n    changeTableElemValueCurrency,\n    currencyList\n  }) => {\n    const handleClick = () => {\n      doJobWithFormula(value, name, valueType);\n      setCurrentTableElement(name, currency);\n    };\n\n    const handleChangeCurrency = () => {\n      const array = currencyList || ['num'];\n      const currencyIndex = array.findIndex(elem => {\n        return (currency || array[0]) === elem;\n      });\n\n      const nextCurrency =\n        currencyIndex === array.length - 1\n          ? array[0]\n          : array[currencyIndex + 1];\n\n      changeTableElemValueCurrency(name, nextCurrency);\n    };\n\n    const decoratedCurrencyValue = currency\n      ? decorateCurrency(value, currency)\n      : '';\n\n    const cellStyleList = `${\n      isCurrent && rowIndex\n        ? 'cell--current'\n        : rowIndex\n        ? 'cell'\n        : 'cell cell__ttl'\n    } ${isCurrentTableColl ? 'cell__ttl--highlight' : ''}`;\n\n    return (\n      <td className={cellStyleList} onClick={handleClick}>\n        {rowIndex ? (\n          <div\n            className=\"cell__content\"\n            title={\n              currency === currencyList[0] ? value : decoratedCurrencyValue\n            }\n          >\n            {!currency || isCurrent || currency === currencyList[0] ? (\n              <input\n                className={`cell__field ${valueType}`}\n                value={value}\n                name={name}\n                onChange={handleChangeTableElement}\n              />\n            ) : (\n              decoratedCurrencyValue\n            )}\n            {valueType === 'number' && isCurrent && (\n              <div className=\"cell__currency\" onClick={handleChangeCurrency}>\n                {currency || currencyList[0]}\n              </div>\n            )}\n          </div>\n        ) : (\n          letter\n        )}\n      </td>\n    );\n  }\n);\n\nCell.propTypes = {\n  rowIndex: PropTypes.number,\n  letter: PropTypes.string,\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  handleChangeTableElement: PropTypes.func,\n  name: PropTypes.string,\n  isCurrentTableColl: PropTypes.bool,\n  doJobWithFormula: PropTypes.func,\n  setCurrentTableElement: PropTypes.func,\n  valueType: PropTypes.string,\n  isCurrent: PropTypes.bool,\n  changeTableElemValueCurrency: PropTypes.func\n};\n\nexport default Cell;\n","export const selectValues = state => state.table.values;\n\nexport const selectLoading = state => state.table.loading;\n\nexport const selectAlphabet = state => state.table.alphabet;\n\nexport const selectRows = state => state.table.rows;\n\nexport const selectCurrent = state => state.table.current.name;\n\nexport const selectCurrentCurrency = state => state.table.current.currency;\n\nexport const selectCurrencyList = state => state.table.currencyList;\n","import {\n  FETCH_TABLE,\n  LOAD_TABLE,\n  CHANGE_TABLE_ELEM,\n  SET_CURRENT,\n  CHANGE_CURRENCY\n} from './types';\n\nimport { resolvePath } from '../../helpers/index';\nimport { regexUrl } from '../../helpers';\n\nexport const loadTable = loading => ({ type: LOAD_TABLE, loading });\n\nexport const fetchTable = () => dispatch => {\n  fetch(resolvePath('index.json'))\n    .then(j => j.json())\n    .then(data => {\n      dispatch({ type: FETCH_TABLE, tableData: data });\n    });\n};\n\nexport const changeTableElemValue = (name, value) => {\n  return {\n    type: CHANGE_TABLE_ELEM,\n    name,\n    value,\n    valueType: regexUrl.test(value) ? 'url' : +value * 1 ? 'number' : 'string'\n  };\n};\n\nexport const changeTableElemValueCurrency = (name, currency) => ({\n  type: CHANGE_CURRENCY,\n  name,\n  currency\n});\n\nexport const handleChangeTableElement = ({ target: { name, value } }) => {\n  return changeTableElemValue(name, value);\n};\n\nexport const setCurrentTableElement = (name, currency) => (dispatch, store) => {\n  (!store().controls.addressLine || !store().table.current) &&\n    dispatch({\n      type: SET_CURRENT,\n      current: name,\n      currency\n    });\n};\n\nexport const doJobWithFormula = (value, name, valueType) => (\n  dispatch,\n  store\n) => {\n  const {\n    table: { current, values },\n    controls: { addressLine }\n  } = store();\n\n  if (current.name && current.name !== name && addressLine.startsWith('=sum')) {\n    if (valueType === 'number' && values[name]) {\n      const newTableValue = changeTableElemValue(\n        current.name,\n        +(values[current.name] ? values[current.name].value : 0) + +value\n      );\n\n      current.currency && current.currency === values[name].currency\n        ? dispatch(newTableValue)\n        : (!current.currency && !values[name].currency) ||\n          !values[name].currency === 'NUM'\n        ? dispatch(newTableValue)\n        : alert('Wrong currency type');\n    } else if (addressLine.startsWith('=sum')) alert('Cannot be added');\n\n    if (addressLine.startsWith('=concat')) {\n      value\n        ? dispatch(\n            changeTableElemValue(\n              current.name,\n              (values[current.name] ? values[current.name].value : '') + value\n            )\n          )\n        : alert('Cannot be collected');\n    }\n\n    if (\n      current.name &&\n      current.name !== name &&\n      addressLine.startsWith('=average')\n    ) {\n      if (!current.currency) {\n        alert('Forbidden');\n        return;\n      }\n      if (\n        addressLine.startsWith('=average') &&\n        valueType === 'number' &&\n        values[name]\n      ) {\n        const newTableValue = changeTableElemValue(\n          current.name,\n          (+(values[current.name] ? values[current.name].value : value) +\n            +value) /\n            2\n        );\n\n        current.currency && current.currency === values[name].currency\n          ? dispatch(newTableValue)\n          : (!current.currency && !values[name].currency) ||\n            !values[name].currency === 'NUM'\n          ? dispatch(newTableValue)\n          : alert('Wrong currency type');\n      } else alert('Cannot be compared');\n    }\n  }\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport Cell from '../components/blocks/cell';\n\nimport {\n  selectValues,\n  selectCurrent,\n  selectCurrencyList\n} from '../store/table/tableSelectors';\nimport {\n  handleChangeTableElement,\n  setCurrentTableElement,\n  doJobWithFormula,\n  changeTableElemValueCurrency\n} from '../store/table/tableActions';\n\nconst CellContainer = props => {\n  const { tableValue } = props;\n  const value = tableValue ? tableValue.value : '';\n  const valueType = tableValue ? tableValue.valueType : null;\n  const currency = tableValue ? tableValue.currency : null;\n\n  return <Cell {...props} {...{ value, valueType, currency }} />;\n};\n\nconst mapStateToProps = (state, props) => {\n  const name = `${props.letter}${props.rowIndex}`;\n\n  const current = selectCurrent(state);\n  const isCurrentTableColl =\n    current && props.rowIndex === 0 ? current[0] === props.letter : false;\n\n  return {\n    tableValue: selectValues(state)[name],\n    isCurrent: selectCurrent(state) === name,\n    isCurrentTableColl,\n    name,\n    currencyList: selectCurrencyList(state),\n    ...props\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  {\n    handleChangeTableElement,\n    setCurrentTableElement,\n    doJobWithFormula,\n    changeTableElemValueCurrency\n  }\n)(CellContainer);\n","import Row from './Row';\n\nexport default Row;\n","import React, { memo } from 'react';\nimport CellContainer from '../../../containers/CellContainer';\nimport PropTypes from 'prop-types';\n\nconst Row = memo(({ rowIndex, alphabet, isCurrentTableRow }) => {\n  const renderCells = letter => (\n    <CellContainer key={`${letter}${rowIndex}`} {...{ rowIndex, letter }} />\n  );\n\n  return (\n    <tr>\n      <td\n        className={`${rowIndex ? 'cell cell__ttl' : ''} ${\n          isCurrentTableRow ? 'cell__ttl--highlight' : ''\n        }`}\n      >\n        {rowIndex ? rowIndex : ''}\n      </td>\n      {alphabet && alphabet.map(renderCells)}\n    </tr>\n  );\n});\n\nRow.propTypes = {\n  rowIndex: PropTypes.number,\n  alphabet: PropTypes.arrayOf(PropTypes.string),\n  isCurrentTableRow: PropTypes.bool\n};\n\nexport default Row;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport Row from '../components/blocks/row';\n\nimport { selectCurrent } from '../store/table/tableSelectors';\n\nconst CellContainer = props => {\n  return <Row {...props} />;\n};\n\nconst mapStateToProps = (state, props) => {\n  const current = selectCurrent(state);\n  const isCurrentTableRow = current\n    ? +current.slice(1) === +props.rowIndex\n    : false;\n\n  return { isCurrentTableRow, ...props };\n};\n\nexport default connect(\n  mapStateToProps,\n  {}\n)(CellContainer);\n","import Controls from './Controls';\n\nexport default Controls;\n","import React from 'react';\n\nconst Controls = ({ current, addressLine, setAddressLine, currentType }) => {\n  return (\n    <div className=\"controls\">\n      <div className=\"controls__address-line-container\">\n        fx\n        <input\n          className=\"controls__address-line\"\n          onChange={({ target }) => setAddressLine(target.value)}\n          placeholder={\n            currentType === 'url' ? `=HYPERLINK(${current})` : current\n          }\n          value={addressLine}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default Controls;\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { selectCurrent, selectValues } from '../store/table/tableSelectors';\nimport { selectAddressLine } from '../store/controls/controlsSelectors';\nimport { setAddressLine } from '../store/controls/controlsActions';\n\nimport Controls from '../components/sections/controls';\n\nconst ControlsContainer = props => {\n  return <Controls {...props} />;\n};\n\nconst mapStateToProps = (state, props) => {\n  const current = selectCurrent(state);\n  const addressLine = selectAddressLine(state);\n  const currentValue = selectValues(state)[current];\n\n  return {\n    ...props,\n    current,\n    currentType: currentValue ? currentValue.valueType : null,\n    addressLine\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  { setAddressLine }\n)(ControlsContainer);\n","export const selectAddressLine = state => state.controls.addressLine;\n","import { SET_ADDRESS_LINE, SET_CURRENT_FORMULA } from './types';\n\nexport const setCurrentFormula = formula => {\n  return {\n    formula,\n    type: SET_CURRENT_FORMULA\n  };\n};\n\nexport const setAddressLine = addressLine => dispatch => {\n  addressLine === '=sum' && dispatch(setCurrentFormula(addressLine));\n  dispatch({\n    type: SET_ADDRESS_LINE,\n    addressLine\n  });\n};\n","import Table from './Table';\n\nexport default Table;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport RowContainer from '../../containers/RowContainer';\nimport ControlsContainer from '../../containers/ControlsContainer';\n\nconst Table = ({ alphabet, rows }) => {\n  const tableRows = new Array(rows).fill(null);\n\n  const renderRows = (_, index) => {\n    return <RowContainer key={index} rowIndex={index} alphabet={alphabet} />;\n  };\n\n  return (\n    <div className=\"table-page\">\n      <ControlsContainer />\n      <div className=\"table-page__table-container\">\n        <table className=\"table-page__table\">\n          <thead>{tableRows.map(renderRows)}</thead>\n        </table>\n      </div>\n    </div>\n  );\n};\n\nTable.propTypes = {\n  alphabet: PropTypes.arrayOf(PropTypes.string),\n  rows: PropTypes.number\n};\n\nexport default Table;\n","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport Table from '../pages/table';\nimport { fetchTable } from '../store/table/tableActions';\nimport {\n  selectLoading,\n  selectAlphabet,\n  selectRows\n} from '../store/table/tableSelectors';\n\nconst TablePageContainer = ({ fetchTable, loading, alphabet, rows }) => {\n  useEffect(fetchTable, []);\n\n  return !loading ? <Table {...{ alphabet, rows }} /> : <div>Loading...</div>;\n};\n\nconst mapStateToProps = state => {\n  return {\n    loading: selectLoading(state),\n    alphabet: selectAlphabet(state),\n    rows: selectRows(state)\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  { fetchTable }\n)(TablePageContainer);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/main.scss';\n\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './store/store';\nimport TablePageContainer from './containers/TablePageContainer';\n\nReactDOM.render(\n  <Provider store={store}>\n    <TablePageContainer />\n  </Provider>,\n  document.getElementById('root')\n);\n// store.subscribe(() => console.log(store.getState()));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}